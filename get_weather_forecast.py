from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from bs4 import BeautifulSoup
import re
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as ec
from selenium.common.exceptions import WebDriverException


user_drivers = {}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Selenium
chrome_options = Options()
chrome_options.add_argument("--headless")
chrome_options.add_argument("--no-sandbox")
chrome_options.add_argument("--disable-dev-shm-usage")

browser = webdriver.Chrome(options=chrome_options)
browser.get('about:blank')  # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É, —á—Ç–æ–±—ã –±—Ä–∞—É–∑–µ—Ä –±—ã–ª –≥–æ—Ç–æ–≤

# –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –≥–æ—Ä–æ–¥–∞ –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∏–º –∫–æ–¥—ã
POPULAR_CITIES = {
    "–ú–æ—Å–∫–≤–∞": "moscow",
    "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥": "saint-petersburg",
    "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫": "novosibirsk",
    "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥": "yekaterinburg",
    "–ö–∞–∑–∞–Ω—å": "kazan"
}

YANDEX_URL = "https://yandex.ru/pogoda/ru-RU/{}/details"
YANDEX_URL_DAY = "https://yandex.ru/pogoda/{}"

# –í—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–æ–Ω—ã –≥–æ—Ä–æ–¥–æ–≤
CITY_TIMEZONES = {
    "–ú–æ—Å–∫–≤–∞": "Europe/Moscow",
    "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥": "Europe/Moscow",
    "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫": "Asia/Novosibirsk",
    "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥": "Asia/Yekaterinburg",
    "–ö–∞–∑–∞–Ω—å": "Europe/Moscow"
}


def get_temperature_emoji(temperature):
    match = re.search(r'([+-]?\d+\.?\d*)', temperature.replace('‚àí', '-'.strip()))
    temperature = int(match.group(1))
    if temperature < 0:
        return "ü•∂"
    elif 0 <= temperature <= 15:
        return "üòé"
    else:
        return "ü•µ"


def get_wind_direction(full_direction):
    full_direction = full_direction.split()[-1]
    directions = {
        '–°': '–°–µ–≤–µ—Ä–Ω—ã–π',
        '–Æ': '–Æ–∂–Ω—ã–π',
        '–ó': '–ó–∞–ø–∞–¥–Ω—ã–π',
        '–í': '–í–æ—Å—Ç–æ—á–Ω—ã–π',
        '–°–ó': '–°–µ–≤–µ—Ä–æ-–ó–∞–ø–∞–¥–Ω—ã–π',
        '–°–í': '–°–µ–≤–µ—Ä–æ-–í–æ—Å—Ç–æ—á–Ω—ã–π',
        '–Æ–ó': '–Æ–≥–æ-–ó–∞–ø–∞–¥–Ω—ã–π',
        '–Æ–í': '–Æ–≥–æ-–í–æ—Å—Ç–æ—á–Ω—ã–π',
    }
    return directions.get(full_direction, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")


def get_weather_condition(condition):
    condition = condition.lower()
    weather_emojis = {
        '—è—Å–Ω–æ': "‚òÄÔ∏è",
        '—Ç—É–º–∞–Ω': "üå´Ô∏è",
        '—Å–º–æ–≥': "üå´Ô∏è",
        '–æ–±–ª–∞—á–Ω–æ —Å –ø—Ä–æ—è—Å–Ω–µ–Ω–∏—è–º–∏': "üå•Ô∏è",
        '–ø–∞—Å–º—É—Ä–Ω–æ': "‚òÅÔ∏è‚òÅÔ∏è‚òÅÔ∏è",
        '–º–∞–ª–æ–æ–±–ª–∞—á–Ω–æ': "‚òÅÔ∏è",
        '–Ω–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å': "üíß",
        '–¥–æ–∂–¥—å': "üåßÔ∏è",
        '–≥—Ä–æ–∑–∞': "‚õàÔ∏è",
        '–¥–æ–∂–¥—å —Å –≥—Ä–æ–∑–æ–π': "‚õàÔ∏èüåßÔ∏è",
        '–ª–∏–≤–µ–Ω—å': "üåßÔ∏èüåßÔ∏èüåßÔ∏è",
        '–≥—Ä–∞–¥': "üåßÔ∏èüßäÔ∏è",
        '–¥–æ–∂–¥—å —Å–æ —Å–Ω–µ–≥–æ–º': "üåßÔ∏è‚ùÑÔ∏è",
        '–Ω–µ–±–æ–ª—å—à–æ–π —Å–Ω–µ–≥': "‚ùÑÔ∏è",
        '—Å–Ω–µ–≥': "üå®Ô∏è",
    }
    return weather_emojis.get(condition, "")


async def open_new_tab(url):
    """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –Ω–æ–≤—É—é –≤–∫–ª–∞–¥–∫—É —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º URL."""
    try:
        browser.execute_script("window.open('');")
        browser.switch_to.window(browser.window_handles[-1])
        browser.get(url)
    except WebDriverException as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±—Ä–∞—É–∑–µ—Ä–æ–º: {e}")


async def close_current_tab():
    """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â—É—é –≤–∫–ª–∞–¥–∫—É."""
    browser.close()
    browser.switch_to.window(browser.window_handles[-1])


async def get_weather(city_code, forecast_type, detailed):
    """–ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã —á–µ—Ä–µ–∑ Selenium –∏ BeautifulSoup."""
    url = YANDEX_URL.format(city_code) if detailed else YANDEX_URL_DAY.format(city_code)
    await open_new_tab(url)
    if detailed:
        WebDriverWait(browser, 10).until(
            ec.presence_of_element_located(
                (By.XPATH, "//div[contains(@style, 'grid-area: temperature-morning; padding: 10px 0px;')]"))
        )
    soup = BeautifulSoup(browser.page_source, 'html.parser')

    if forecast_type == "current":
        try:
            fact_time = soup.find('time', class_="fact__time").text.strip().split()[-1].strip('.')

            temp_element = soup.find('div', class_='fact__temp').find('span', class_='temp__value')
            condition_element = soup.find('div', class_='link__condition')
            feels_element = soup.find('div', class_='link__feelings').find('span', class_='temp__value')
            props = soup.find('div', class_="fact__props")
            wind_element = props.find_next('div', class_="fact__wind-speed").find_next('span',
                                                                                       class_="a11y-hidden").text.split()
            humidity_element = props.find_next('div', class_="fact__humidity").find_next('span',
                                                                                         class_="a11y-hidden").text
            pressure_element = props.find_next('div', class_="fact__pressure").find_next('span',
                                                                                         class_="a11y-hidden").text.split()

            temperature = temp_element.text.strip() if temp_element else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            condition = condition_element.text.strip() if condition_element else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            feels_like = feels_element.text.strip() if feels_element else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            wind_speed = wind_element[1]
            wind_direction = wind_element[-1]
            humidity = humidity_element
            pressure = pressure_element[1]

            condition_emoji = get_weather_condition(condition)
            temperature_emoji = get_temperature_emoji(temperature)
            feels_like_emoji = get_temperature_emoji(feels_like)
            await close_current_tab()

            return (
                f"–ü–æ–≥–æ–¥–∞ –Ω–∞ {fact_time}üïõ:\n"
                f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temperature}C {temperature_emoji}\n"
                f"–°–æ—Å—Ç–æ—è–Ω–∏–µ:  {condition} {condition_emoji}\n"
                f"–î–∞–≤–ª–µ–Ω–∏–µ: {pressure} –º–º. —Ä—Ç. —Å—Ç. ‚è≤Ô∏è\n"
                f"–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity} üíß\n"
                f"–í–µ—Ç–µ—Ä: {wind_speed} –º/—Å  {wind_direction.capitalize()} üå™Ô∏è\n"
                f"–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {feels_like}C {feels_like_emoji}"

            )
        except Exception as e:
            await close_current_tab()
            return f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥–µ: {e}"

    if forecast_type == "all_day":
        try:
            forecast_days = soup.find_all('li', class_='forecast-briefly__day')
            aria_labels = [day.find('a').get('aria-label') for day in forecast_days if day.find('a')]
            aria_labels = [x.split(', ') for x in aria_labels]
            aria_label = aria_labels[1]
            condition_emoji = get_weather_condition(aria_label[-3])
            await close_current_tab()
            return (
                f"–ü–æ–≥–æ–¥–∞ –Ω–∞ –≤–µ—Å—å –¥–µ–Ω—å:\n"
                f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–Ω–µ–º:  {aria_label[-2].capitalize()}C ‚òÄÔ∏è\n"
                f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –Ω–æ—á—å—é:  {aria_label[-1].capitalize()}C üåô\n"
                f"–°–æ—Å—Ç–æ—è–Ω–∏–µ: {aria_label[-3]} {condition_emoji}"
            )
        except Exception as e:
            await close_current_tab()
            return f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –Ω–∞ –≤–µ—Å—å –¥–µ–Ω—å: {e}"
    period_map = {
        "morning": "—É—Ç—Ä–æ",
        "day": "–¥–µ–Ω—å",
        "evening": "–≤–µ—á–µ—Ä",
        "night": "–Ω–æ—á—å"
    }
    forecast_period = period_map.get(forecast_type)

    if not forecast_period:
        await close_current_tab()
        return "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫."

    try:
        all_periods = soup.find_all('article')
        cur_day = all_periods[1]
        if cur_day:
            def get_forecast_info(cur_day_func, forecast_type_func):
                style_suffix = f"{forecast_type_func}"
                temperature_cur = cur_day_func.find_next('div',
                                                         style=f"grid-area: temperature-{style_suffix}; padding: 10px 0px;")
                condition_cur = cur_day_func.find_next('div', style=f"grid-area: condition-{style_suffix};").find_next(
                    'div').find_next('div')
                pressure = cur_day_func.find_next('div', style=f"grid-area: pressure-{style_suffix};")
                humidity = cur_day_func.find_next('div', style=f"grid-area: humidity-{style_suffix};")
                wind = cur_day_func.find_next('div', style=f"grid-area: wind-{style_suffix};")
                feels_like_cur = cur_day_func.find_next('div', style=f"grid-area: feelsLike-{style_suffix};")
                return {
                    "temperature_cur": str(temperature_cur).split('</div>')[-2],
                    "condition_cur": condition_cur.get_text(),
                    "pressure": pressure.get_text(),
                    "humidity": humidity.get_text(),
                    "wind": ' '.join(wind.stripped_strings),
                    "feels_like_cur": feels_like_cur.get_text(),
                }

            forecast_info = get_forecast_info(cur_day, forecast_type)
            temperature_emoji = get_temperature_emoji(forecast_info['temperature_cur'])
            wind_direction_emoji = get_wind_direction(forecast_info['wind'])
            condition_emoji = get_weather_condition(forecast_info['condition_cur'])
            feels_like_emoji = get_temperature_emoji(forecast_info['feels_like_cur'])
            await close_current_tab()
            return (
                f"–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ {forecast_period}:\n"
                f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {forecast_info['temperature_cur']}C {temperature_emoji}\n"
                f"–°–æ—Å—Ç–æ—è–Ω–∏–µ:  {forecast_info['condition_cur'].capitalize()} {condition_emoji}\n"
                f"–î–∞–≤–ª–µ–Ω–∏–µ: {forecast_info['pressure']} –º–º. —Ä—Ç. —Å—Ç. ‚è≤Ô∏è\n"
                f"–í–ª–∞–∂–Ω–æ—Å—Ç—å: {forecast_info['humidity']} üíß\n"
                f"–í–µ—Ç–µ—Ä: {forecast_info['wind'].split()[0]} –º/—Å {wind_direction_emoji} üå™Ô∏è\n"
                f"–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {forecast_info['feels_like_cur']}C {feels_like_emoji}"
            )
        else:
            await close_current_tab()
            return f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è {forecast_period}."
    except Exception as e:
        await close_current_tab()
        return f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –Ω–∞ {forecast_period}: {e}"